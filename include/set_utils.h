////////////////////////////////////////////////////////////////////////
//
// ADT Set utilities
//
// Βοηθητικές συναρτήσεις για λειτουργίες πάνω στον ADT Set.
//
////////////////////////////////////////////////////////////////////////

#pragma once // #include το πολύ μία φορά

#include "ADTSet.h"
#include "ADTVector.h"


// Δείκτης σε συνάρτηση που "επισκέπτεται" ένα στοιχείο value του
// Set set. Χρησιμοποιείται στην set_traverse.

typedef void (*TraverseFunc)(Set set, Pointer value);


// Δημιουργεί και επιστρέφει ένα Set που περιέχει όλα τα στοιχεία του
// Vector vec, με διάταξη compare.
// (Διπλά στοιχεία αντιμετωπίζονται ως συνήθως, κάθε εισαγωγή
//  αφαιρεί το προηγούμενο από το set.)

Set set_from_vector(Vector vec, CompareFunc compare);

// Δημιουργεί και επιστρέφει ένα Vector που περιέχει όλα τα στοιχεία
// του set με τη σειρά διάταξης.

Vector set_to_vector(Set set);

// Καλεί τη συνάρτηση f(set, value) σε κάθε στοιχείο του set με τη σειρά
// διάταξης. Για απλότητα, θεωρούμε ότι η f δεν μεταβάλλει το set (δεν
// προσθέτει ή αφαιρεί στοιχεία).

void set_traverse(Set set, TraverseFunc f);

// Δημιουργεί και επιστρέφει ένα set που περιέχει τα στοιχεία και
// των δύο Sets set1, set2. Τα αρχικά sets δεν μεταβάλλονται.
// (Διπλά στοιχεία αντιμετωπίζονται ως συνήθως, κάθε εισαγωγή
//  αφαιρεί το προηγούμενο από το set.)
//
// Τα δύο Set οφείλουν να έχουν την ίδια διάταξη με τη συνάρτηση compare,
// αλλιώς η συμπεριφορά είναι μη ορισμένη.

Set set_merge(Set set1, Set set2, CompareFunc compare);

// Επιστρέφει την k-οστή τιμή του set με τη σειρά διάταξης, δηλαδή
// το μικρότερο στοιχείο αν k == 0, το δεύτερο μικρότερο αν k == 1,
// κλπ. Η συμπεριφορά είναι μη ορισμένη αν k >= set size.

Pointer set_find_k_smallest(Set set, int k);


